name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  PYTHON_VERSION: '3.10'
  NODE_VERSION: '18'

jobs:
  # ==========================================================================
  # Linting and Code Quality
  # ==========================================================================
  lint:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy pylint
        pip install -r requirements.txt
    
    - name: Run Black (formatting check)
      run: black --check --diff .
    
    - name: Run isort (import sorting)
      run: isort --check-only --diff .
    
    - name: Run flake8 (linting)
      run: flake8 src/ api/ app/ --max-line-length=100 --ignore=E203,W503

    - name: Run pylint (code analysis)
      run: pylint src/ api/ --disable=C0111,R0913,R0914
      continue-on-error: true

  # ==========================================================================
  # Unit Tests
  # ==========================================================================
  test:
    name: Run Tests
    runs-on: ${{ matrix.os }}
    needs: lint
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ['3.9', '3.10', '3.11']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-xdist pytest-timeout
    
    - name: Run tests with coverage
      run: |
        pytest tests/ -v --cov=src --cov=api --cov=app \
          --cov-report=xml --cov-report=term-missing \
          --timeout=300 -n auto
    
    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.10'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  # ==========================================================================
  # API Integration Tests
  # ==========================================================================
  integration-test:
    name: API Integration Tests
    runs-on: ubuntu-latest
    needs: test
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: lensing
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: lensing_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install httpx pytest-asyncio
    
    - name: Run API integration tests
      env:
        DATABASE_URL: postgresql://lensing:testpass@localhost:5432/lensing_test
        REDIS_URL: redis://localhost:6379
      run: |
        pytest tests/test_api_integration.py -v --timeout=60

  # ==========================================================================
  # Docker Build and Push
  # ==========================================================================
  docker:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Extract metadata (tags, labels)
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ${{ secrets.DOCKER_USERNAME }}/lensing-api
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha
    
    - name: Build and push API image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/lensing-api:buildcache
        cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/lensing-api:buildcache,mode=max
    
    - name: Build and push Streamlit image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.streamlit
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/lensing-webapp:latest
        cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/lensing-webapp:buildcache
        cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/lensing-webapp:buildcache,mode=max

  # ==========================================================================
  # Security Scanning
  # ==========================================================================
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: docker
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ secrets.DOCKER_USERNAME }}/lensing-api:latest
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # ==========================================================================
  # Deploy to Production
  # ==========================================================================
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [docker, integration-test]
    if: github.event_name == 'release'
    environment:
      name: production
      url: https://api.lensing.example.com
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    
    - name: Deploy to ECS
      run: |
        # Update ECS service with new task definition
        aws ecs update-service \
          --cluster lensing-cluster \
          --service lensing-api-service \
          --force-new-deployment
    
    - name: Verify deployment
      run: |
        sleep 30
        curl -f https://api.lensing.example.com/health || exit 1
    
    - name: Notify Slack
      if: success()
      uses: slackapi/slack-github-action@v1
      with:
        payload: |
          {
            "text": "✅ Deployment successful: ${{ github.event.release.tag_name }}",
            "blocks": [
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "*Gravitational Lensing API* deployed to production\n*Version:* ${{ github.event.release.tag_name }}\n*Status:* ✅ Success"
                }
              }
            ]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # ==========================================================================
  # Performance Tests
  # ==========================================================================
  performance:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install locust pytest-benchmark
    
    - name: Run performance tests
      run: |
        pytest tests/test_performance.py --benchmark-only --benchmark-json=benchmark.json
    
    - name: Store benchmark result
      uses: benchmark-action/github-action-benchmark@v1
      with:
        tool: 'pytest'
        output-file-path: benchmark.json
        github-token: ${{ secrets.GITHUB_TOKEN }}
        auto-push: true
